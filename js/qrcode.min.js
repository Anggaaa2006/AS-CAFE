// QR Code generation library (simplified version)
// In production, use the full qrcode.js library from CDN or npm

var QRCode = function (element, options) {
  this.element = element
  this.options = options || {}
  this.generate()
}

QRCode.prototype.generate = function () {
  // Simplified QR code generation
  // In production, this would generate actual QR code
  const canvas = document.createElement("canvas")
  canvas.width = this.options.width || 200
  canvas.height = this.options.height || 200

  const ctx = canvas.getContext("2d")

  // Create a simple pattern (in real implementation, this would be proper QR code)
  const size = 10
  const cols = canvas.width / size
  const rows = canvas.height / size

  // Generate random pattern based on text
  const text = this.options.text || ""
  let seed = 0
  for (let i = 0; i < text.length; i++) {
    seed += text.charCodeAt(i)
  }

  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      const random = Math.sin(seed * (i * cols + j)) * 10000
      const value = random - Math.floor(random)

      ctx.fillStyle = value > 0.5 ? this.options.colorDark || "#000" : this.options.colorLight || "#fff"
      ctx.fillRect(j * size, i * size, size, size)
    }
  }

  // Add corner markers (simplified)
  this.addCornerMarker(ctx, 0, 0, size * 7)
  this.addCornerMarker(ctx, canvas.width - size * 7, 0, size * 7)
  this.addCornerMarker(ctx, 0, canvas.height - size * 7, size * 7)

  this.element.appendChild(canvas)
}

QRCode.prototype.addCornerMarker = (ctx, x, y, size) => {
  ctx.fillStyle = "#000"
  ctx.fillRect(x, y, size, size)
  ctx.fillStyle = "#fff"
  ctx.fillRect(x + size / 7, y + size / 7, (size * 5) / 7, (size * 5) / 7)
  ctx.fillStyle = "#000"
  ctx.fillRect(x + (size * 2) / 7, y + (size * 2) / 7, (size * 3) / 7, (size * 3) / 7)
}

QRCode.CorrectLevel = {
  L: 1,
  M: 0,
  Q: 3,
  H: 2,
}
